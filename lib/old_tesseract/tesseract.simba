(*
Tesseract
=========

The tesseract file holds functions that use the tesseract plugin.  These
functions are used to recognize text on the client.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/tesseract/tesseract.simba>`_.

*)

{$loadlib libtesseract}

var
  savePath, imgPath: string;

const                    {resize multipler w, resize multipler h, invert? threshold amount}
  FILTER_SMALL_CHARS: array [0..3] of variant = [3, 3, false, 50];
  FILTER_NPC_CHAT_CHARS: array [0..3] of variant = [3, 3, true, -50];
  FILTER_SMALL_CHARS_2: array [0..3] of variant = [5, 5, false, 55];

{*
__initTesseractPaths
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

     procedure __initTesseractPaths();

Loads the paths needed for tesseract to function.

.. note::

    - By: Olly
    - Last Updated: December 13, 2013 by Olly

Example:

.. code-block:: pascal

     __initTesseractPaths();
*}
procedure __initTesseractPaths();

  function bracketReplace(s: string): string;
  begin
    result := replace(s, '\', '/', [rfReplaceAll]);
  end;

const
  basePath = includePath + 'srl-6/lib/old_tesseract/';
begin
  savePath := bracketReplace(basePath + 'temp/tmp-'+toStr(client));
  imgPath := bracketReplace(basePath + 'temp/img-'+toStr(client)+'.bmp');

  tesseractSetPaths(bracketReplace(basePath + 'tesseract.exe'), imgPath, savePath);

  addOnTerminate('__deleteTesseractFiles');
end;

{*
__deleteTesseractFiles
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

     procedure __deleteTesseractFiles();

Deletes files created by the tesseract.

.. note::

    - By: Olly
    - Last Updated: December 13, 2013 by Olly

Example:

.. code-block:: pascal

     __deleteTesseractFiles();
*}
procedure __deleteTesseractFiles();
begin
  if (fileExists(savePath + '.txt')) then
    deleteFile(savePath + '.txt');

  if (fileExists(imgPath)) then
    deleteFile(imgPath);
end;

(*
tesseractGetText; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

     function tesseractGetText(const bmp: integer; const config: string): string; overload;

Overloaded method, reads the text from a bitmap, rather than a file.

.. note::

    - By: Olly
    - Last Updated: December 13, 2013 by Olly

Example:

.. code-block:: pascal

     writeln(tesseractGetText(bmp));
*)
function tesseractGetText(const bmp: integer; config: string = ''): string; overload;
begin
  saveBitmap(bmp, imgPath);
  result := tesseractGetText(config);
end;

(*
tesseractGetText; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

     function tesseractGetText(const x1, y1, x2, y2, resizeMultipler: integer; threshInvert: boolean; threshAmount: integer; config: string = ''): string; overload;

Overloaded method, reads text in area x1, y1, x2, y2 on the client

  - resizeMultiW - How much to enlarge the width of the image (2 = double etc..).
  - resizeMultiH - How much to enlarge the height of the image (2 = double etc..).
  - threshInvert - Invert the threshold? (if text background is brighter than text, invert should be true).
  - threshAmount - Amount to add/subtract to the threshold.
  - config - What chars to only extract (currently only supports 'digits') - defualt set as ''.

.. note::

    - By: Olly
    - Last Updated: December 22, 2013 by Olly

Example:

.. code-block:: pascal

     writeln(tesseractGetText(woBoxes[i].x1, woBoxes[i].y1, woBoxes[i].x2, woBoxes[i].y2, 3, 3, 50, false));
*)
function tesseractGetText(const x1, y1, x2, y2, resizeMultiW, resizeMultiH: integer; threshInvert: boolean; threshAmount: integer; config: string = ''): string; overload;
var
  matrix: T2DIntegerArray;
  bmp, w, h, rw, rh: integer;
  {$IFDEF TESSERACT_DEBUG} t: LongWord := getSystemTime(); {$ENDIF}
begin
  bmp := bitmapFromClient(x1, y1, x2, y2);

  try
    getBitmapSize(bmp, w, h);

    if (w > 1) and (h > 1) then
    begin
      matrix := bitmapToMatrix(bmp);

      if (resizeMultiW > 0) and (resizeMultiH > 0)  then
        resizeBilinearMatrix(matrix, resizeMultiW * w, resizeMultiH * h);

      thresholdAdaptiveMatrix(matrix, 0, 255, threshInvert, TM_Mean, threshAmount);
      drawMatrixBitmap(bmp, matrix);

      result := tesseractGetText(bmp, config);
    end else
      writeln(format('tesseractGetText(): Bitmap is is too small (%d, %d)', [w, h]));

    {$IFDEF TESSERACT_DEBUG}
      writeln(format('tesseractGetText(): Resized (%d > %d, %d > %d), took %d ms. output = " %s "', [w, length(matrix[0]), h, length(matrix), getSystemTime() - t, result]));
      displayDebugImgWindow(length(matrix[0]), length(matrix));
      drawBitmapDebugImg(bmp);
    {$ENDIF}

  finally
    freeBitmap(bmp);
  end;
end;

(*
tesseractGetText; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

     function tesseractGetText(const x1, y1, x2, y2: integer; filterMethod: array [0..2] of variant; config: string = ''): string; overload;

Overloaded method, reads text in area x1, y1, x2, y2 on the client with a default filter.
Use one of the filter constants found at the top of this file.

.. note::

    - By: Olly
    - Last Updated: December 22, 2013 by Olly

Example:

.. code-block:: pascal

     writeln(tesseractGetText(100, 100, 200, 200, FILTER_SMALL_CHARS));
*)
function tesseractGetText(const x1, y1, x2, y2: integer; filterMethod: array [0..3] of variant; config: string = ''): string; overload;
begin
  result := tesseractGetText(x1, y1, x2, y2, filterMethod[0], filterMethod[1], filterMethod[2], filterMethod[3], config);
end;

(*
tesseractGetText; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

     function tesseractGetText(const searchBox: tbox; filterMethod: array [0..3] of variant; config: string = ''): string; overload;

Overloaded method, reads text in area searchBox on the client with a default filter.
Use one of the filter constants found at the top of this file.

.. note::

    - By: Ashaman88
    - Last Updated: February 25, 2014 by Ashaman88

Example:

.. code-block:: pascal

     writeln(tesseractGetText(tabBackpack.getBounds, FILTER_SMALL_CHARS));
*)
function tesseractGetText(const searchBox: tbox; filterMethod: array [0..3] of variant; config: string = ''): string; overload;
begin
  result := tesseractGetText(searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, filterMethod[0], filterMethod[1], filterMethod[2], filterMethod[3], config);
end;

type
  TTesseractFilter = record
    multiplerW, multiplerH: integer;
    thresholdSettings: record invert: boolean; amount: byte; method: TBmpThreshMethod; end;
 end;

const
  TESS_FILTER_SMALL_CHARS: TTesseractFilter = [3, 3, [false, 50, TM_Mean]];
  TESS_FILTER_SMALL_CHARS_2: TTesseractFilter = [5, 5, [false, 55, TM_Mean]];
  TESS_FILTER_NPC_CHAT_CHARS: TTesseractFilter = [3, 3, [true, -50, TM_Mean]];

const
  TESS_WHITELIST_NUMBERS = '0123456789';
  TESS_WHITELIST_LETTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  TESS_WHITELIST_NONE = '';

function Tesseract_GetText(const xs, ys, xe, ye: integer; filter: TTesseractFilter; Whitelist: String = ''): string; overload;
var
  v: array[0..3] of Variant;
begin
  v[0] := Filter.multiplerW;
  v[1] := Filter.multiplerH;
  v[2] := Filter.thresholdSettings.invert;
  v[3] := Filter.thresholdSettings.amount;
  Result := tesseractGetText(xs, ys, xe, ye, v, Whitelist);
end;




begin
  __initTesseractPaths();
end;
